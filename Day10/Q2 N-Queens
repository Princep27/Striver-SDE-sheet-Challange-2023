class Solution {
public:
    bool valid(vector<string> &v,int x,int y,int n){
        int i = x-1,j = y;
        while(i >= 0){
            if(v[i][j] == 'Q') 
            return false;
            i--;
        }

        i = x-1; j = y-1;
        while(i >= 0 && j >= 0){
            if(v[i][j] == 'Q')
            return false;
            i--;j--;
        }

        i = x-1; j = y+1;
        while(i >= 0 && j < n){
            if(v[i][j] == 'Q')
            return false;
            i--; j++;
        }
        return true;
    }

    void solve(vector<vector<string>> &ans,vector<string> &temp,int index,int n){
        if(index == n){
            ans.push_back(temp);
            return;
        }

        for(int i=0;i<n;i++){
            if(valid(temp,index,i,n)){
                temp[index][i] = 'Q';
                solve(ans,temp,index+1,n);
                temp[index][i] = '.';
            }
        }
    }

    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> temp;
        string str;

        for(int i=0;i<n;i++) str += '.';
        for(int i=0;i<n;i++) temp.push_back(str);

        solve(ans,temp,0,n);
        return ans;
    }
};
