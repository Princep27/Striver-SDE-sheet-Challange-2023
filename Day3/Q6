class Solution {
public:
    int ans = 0;
    void mergeSort(vector<int> &arr,int l,int mid,int r){
        int n = mid-l+1, m = r-mid;
        vector<int> a(n,0),b(m,0);
        for(int i=0;i<n;i++) a[i] = arr[i+l];
        for(int i=0;i<m;i++) b[i] = arr[mid+1+i];

        int i = 0 , j = 0;
        while(i < n && j < m){
            if(a[i] >= b[j]){
                arr[l++] = a[i++];
            }else{
                arr[l++] = b[j++];
            }
        }

        while(i < n) arr[l++] = a[i++];
        while(j < m) arr[l++] = b[j++];
    }

    void merge(vector<int> &arr,int l,int r){
        if(l < r){
            int mid = (l+r)/2;
            merge(arr,l,mid);
            merge(arr,mid+1,r);

            int i = l ,j = mid+1;
            while(i <= mid && j <= r){
                if((long long)arr[i] > (long long)arr[j]*2){
                    ans += (r-j+1);
                    i++;
                }else{
                    j++;
                }
            }

            mergeSort(arr,l,mid,r);
        }
    }

    int reversePairs(vector<int>& nums) {
        int n = nums.size();
        merge(nums,0,n-1);
        return ans;
    }
};
