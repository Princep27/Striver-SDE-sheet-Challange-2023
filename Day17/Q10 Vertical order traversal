class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        unordered_map<int,vector<int>> mp;
        vector<vector<int>> ans;
        if(root == NULL) return ans;

        int mini = 1500,maxi = 1500;
        queue<pair<TreeNode*,int>> pq;
        pq.push({root,1500});

        while(!pq.empty()){
            int n = pq.size();
            
            unordered_map<int,priority_queue<int,vector<int>,greater<int>>> mpq;
            for(int i=0;i<n;i++){

                int col = pq.front().second;
                TreeNode *temp = pq.front().first;
                mini = min(mini,col);
                maxi = max(maxi,col);
                pq.pop();

                mpq[col].push(temp->val);

                if(temp->left) pq.push({temp->left,col-1});
                if(temp->right) pq.push({temp->right,col+1});
            }

            for(auto it: mpq){
                while(!it.second.empty()){
                    mp[it.first].push_back(it.second.top());
                    it.second.pop();
                }
            }            
        }

        for(int i=mini;i<=maxi;i++){
            ans.push_back(mp[i]);
        }
        return ans;
    }
};
