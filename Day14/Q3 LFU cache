class LFUCache {
public:
    unordered_map<int,list<int>> freqList;
    unordered_map<int,list<int>::iterator> nodeAddress;
    unordered_map<int,pair<int,int> > valnfreq;
    int capacity = 0,curCap = 0,minFrequency = 0;

    LFUCache(int cap) {
        capacity = cap;
    }
    
    int get(int key) {
        if(valnfreq.find(key) == valnfreq.end()) return -1;
        
        int cnt = valnfreq[key].second;
        int value = valnfreq[key].first;

        freqList[cnt].erase(nodeAddress[key]);
        nodeAddress.erase(key);
        valnfreq[key] = {value,cnt+1};
        freqList[cnt+1].push_front(key);
        nodeAddress[key] = freqList[cnt+1].begin();

        if(freqList[minFrequency].size() == 0) minFrequency++;
        return value;
    }
    
    void put(int key, int value) {
        if(capacity <= 0) return;

        if(valnfreq.find(key) != valnfreq.end()){
            valnfreq[key].first = value;
            get(key);
            return;
        }
    
        if(curCap >= capacity){
            int popedKey = freqList[minFrequency].back();
            freqList[minFrequency].pop_back();

            nodeAddress.erase(popedKey);
            valnfreq.erase(popedKey);  
            curCap--;    
        }

        minFrequency = 1;
        freqList[1].push_front(key);
        nodeAddress[key] = freqList[1].begin();
        valnfreq[key] = {value,1};   
        curCap++;
               
    }
};
